ArrayList<Flight> flights;
int rowsPerPage = 5;  // 每页显示的航班数
int currentPage = 0;
int totalPages;
int page = 1;  // 用于控制当前显示的页面
boolean onTimeSelected = false;
boolean delayedSelected = false;
boolean cancelledSelected = false;

void setup() {
  size(800, 600);
  flights = new ArrayList<Flight>();
  loadFlightData("flights2k.csv"); 
  fill(255);
  textSize(14);
  totalPages = (int) ceil(flights.size() / (float) rowsPerPage);
}

void draw() {
  background(0, 102, 204); 
  if (page == 1) {
    drawPage1();
  } else if (page == 2) {
    drawPage2();
  } else if (page == 3) {
    drawPage3();
  }
}

void drawPage1() {
  fill(255);
  textSize(36);
  textAlign(CENTER);
  text("Flight Research", width / 2, 50);
  drawPanel(50, 80, 700, 300, "Search Criteria");
  drawSearchCriteria();
  
  // 在浅蓝色的区域内显示航班信息
  drawPanel(50, 400, 700, 150, "");
  drawFlightInformation();
}

void drawPage2() {
  fill(255);
  textSize(32);
  textAlign(CENTER);
  text("Detailed flight informations", width / 2, 50);
  drawPanel(100, 100, 600, 300, "Flight Details");
  drawFlightDetails();
  drawBackButton();  // 调整返回按钮位置
}

void drawPage3() {
  fill(255);
  textSize(32);
  textAlign(CENTER);
  text("Related flight information", width / 2, 50);
  drawBackButton();  // 调整返回按钮位置
}

void drawFlightInformation() {
  fill(0);
  textSize(16);
  textAlign(LEFT);
  
  // 在按钮下方显示航班信息，分页显示
  int start = currentPage * rowsPerPage;
  int end = min(start + rowsPerPage, flights.size());

  for (int i = start; i < end; i++) {
    Flight flight = flights.get(i);
    String[] fields = flight.toArray();
    
    // 获取航班信息的显示位置
    float x = 60;
    float y = 420 + (i - start) * 25;
    float width = 700;  // 浅蓝色背景区域的宽度

    // 检查鼠标是否点击在航班信息区域内
    if (mouseX > x && mouseX < x + width && mouseY > y - 20 && mouseY < y + 10) {
      fill(200);  // 高亮显示选中的航班信息
      rect(x, y - 20, width, 30, 8);  // 高亮区域，宽度与浅蓝色区域一致
      fill(0);
      for (int e = 0; e < fields.length; e++) {
        text(fields[e], x + e * 150, y);
      }
      
      // 当鼠标点击时跳转到下一个界面
      if (mousePressed) {
        page = 2;  // 跳转到页面 2
      }
    } else {
      // 普通显示航班信息
      fill(0);
      for (int e = 0; e < fields.length; e++) {
        text(fields[e], x + e * 150, y);
      }
    }
  }
}

void drawFlightDetails() {
  fill(0);
  textSize(20);
  text("Airline: Example Air", 120, 170);
  text("Flight Number: EX123", 120, 200);
  drawInteractiveButton(120, 230, "Departure: XYZ Airport");
  drawInteractiveButton(120, 260, "Arrival: ABC Airport");
  drawInteractiveButton(120, 290, "Distance: 500 miles");
}

void drawInteractiveButton(int x, int y, String label) {
  fill(255);
  rect(x, y - 20, 250, 30, 8);
  fill(0);
  textAlign(LEFT, CENTER);
  text(label, x + 10, y - 5);
}

void drawPanel(int x, int y, int w, int h, String title) {
  fill(255, 255, 255, 180);
  rect(x, y, w, h, 15);
  fill(0);
  textSize(22);
  textAlign(LEFT);
  text(title, x + 20, y + 30);
}

void drawSearchCriteria() {
  fill(0);
  textSize(20);
  text("Airport", 80, 140);
  text("Origin:", 80, 165);
  text("Destination:", 80, 190);
  
  text("Date Range", 80, 230);
  text("Fly Date Range:", 80, 255);
  text("Arrive Date Range:", 80, 280);
  
  text("Lateness", 80, 320);
  drawLatenessButtons();
}

void drawLatenessButtons() {
  drawToggleButton(80, 350, "On-time", onTimeSelected);
  drawToggleButton(200, 350, "Delayed", delayedSelected);
  drawToggleButton(320, 350, "Cancelled", cancelledSelected);
}

void drawToggleButton(int x, int y, String label, boolean selected) {
  if (selected) {
    fill(150); 
  } else if (mouseX > x && mouseX < x + 100 && mouseY > y - 20 && mouseY < y + 10) {
    fill(200); 
  } else {
    fill(255);
  }
  rect(x, y - 20, 100, 30, 8);
  fill(0);
  textAlign(CENTER, CENTER);
  text(label, x + 50, y - 5);
}

void drawBackButton() {
  fill(255, 165, 0); 
  rect(50, height - 80, 100, 40, 8);  // 向下移动 Back 按钮
  fill(0);
  textSize(20);
  textAlign(CENTER, CENTER);
  text("Back", 100, height - 60);  // 使其位于新的位置
}

void mousePressed() {
  if (page == 1) {
    // 在页面 1 中点击航班信息时跳转
    for (int i = 0; i < flights.size(); i++) {
      float x = 60;
      float y = 420 + (i - currentPage * rowsPerPage) * 25;
      float width = 700;  // 浅蓝色背景区域的宽度

      // 如果点击了该航班信息
      if (mouseX > x && mouseX < x + width && mouseY > y - 20 && mouseY < y + 10) {
        page = 2;  // 跳转到页面 2
      }
    }
  }

  // 点击返回按钮时切换回上一页
  if (page == 2 || page == 3) {
    if (mouseX > 50 && mouseX < 150 && mouseY > height - 80 && mouseY < height - 40) {
      page = 1;  // 跳转回页面 1
    }
  }
}

void keyPressed() {
  if (keyCode == DOWN) {
    currentPage = min(currentPage + 1, totalPages - 1);
  } else if (keyCode == UP) {
    currentPage = max(currentPage - 1, 0);
  }
}

void loadFlightData(String filename) {
  String[] lines = loadStrings(filename);
  if (lines == null || lines.length < 2) {
    println("Error loading file or empty dataset.");
    return;
  }
  
  for (int i = 1; i < lines.length; i++) {
    String[] cols = split(lines[i], ',');
    if (cols.length >= 18) {
      Flight flight = new Flight(cols);
      flights.add(flight);
    }
  }
}

class Flight {
  String date, airline, flightNum, origin, originCity, originState, dest, destCity, destState;
  int originWac, destWac, crsDepTime, depTime, crsArrTime, arrTime, cancelled, diverted, distance;
  
  Flight(String[] data) {
    date = data[0];
    airline = data[1];
    flightNum = data[2];
    origin = data[3];
    originCity = data[4];
    originState = data[5];
    originWac = int(data[6]);
    dest = data[7];
    destCity = data[8];
    destState = data[9];
    destWac = int(data[10]);
    crsDepTime = int(data[11]);
    depTime = int(data[12]);
    crsArrTime = int(data[13]);
    arrTime = int(data[14]);
    cancelled = int(data[15]);
    diverted = int(data[16]);
    distance = int(data[17]);
  }
  
  String[] toArray() {
    return new String[]{date, airline, flightNum, origin, originCity, originState, dest, destCity, destState, 
                        str(originWac), str(destWac), str(crsDepTime), str(depTime), 
                        str(crsArrTime), str(arrTime), str(cancelled), str(diverted), str(distance)};
  }
}
