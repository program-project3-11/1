import processing.event.*;  // 用于处理鼠标滚轮事件

// 全局变量与航班数据列表
ArrayList<Flight> flights;
int flightPanelX = 50, flightPanelY = 400, flightPanelW = 700, flightPanelH = 150;
int flightItemHeight = 30;   // 每条航班信息按钮的高度
int scrollY = 0;             // 航班信息列表的滚动偏移量

// 页面控制变量
int page = 1; // 当前页面：1、2、3
boolean onTimeSelected = false;    // “On-time” 按钮状态
boolean delayedSelected = false;   // “Delayed” 按钮状态
boolean cancelledSelected = false; // “Cancelled” 按钮状态

// 输入框相关变量
String originText = "";
String destinationText = "";
String flyDateText = "";
String arriveDateText = "";
// focusedField: 0 无焦点，1: Origin, 2: Destination, 3: Fly Date Range, 4: Arrive Date Range
int focusedField = 0;

// 定义 Flight 类，用于存储 CSV 中的航班数据  
// 假设 CSV 文件字段依次为：  
// FL_DATE, MKT_CARRIER, MKT_CARRIER_FL_NUM, ORIGIN, ORIGIN_CITY_NAME, ORIGIN_STATE_ABR, DEST, DEST_STATE_ABR, DEST_CITY_NAME, … 
// 其中：MKT_CARRIER_FL_NUM 直接取自栏目 C（索引 2），DEST_CITY_NAME 来自 I 栏（索引 9）
class Flight {
  String flDate;
  String mktCarrierFlNum;  // 直接取自 CSV 文件的栏目 C（索引 2）
  String originCity;       // 取自 CSV 的 ORIGIN_CITY_NAME，即索引 4
  String destCity;         // 取自 CSV 的 DEST_CITY_NAME，即索引 9

  Flight(String[] data) {
    flDate = data[0];
    mktCarrierFlNum = data[2].replace("\"", "");  // 去除可能存在的多余引号
    originCity = data[4].replace("\"", "");
    destCity = data[9].replace("\"", "");
  }
}

// 加载 CSV 文件中的航班数据
void loadFlightData() {
  String[] lines = loadStrings("flights100k.csv");
  flights = new ArrayList<Flight>();
  // 假设第一行为表头，从第二行开始解析数据
  for (int i = 1; i < lines.length; i++) {
    String[] fields = split(lines[i], ',');
    if (fields.length >= 10) {  // 至少有10个字段，确保 data[9] 存在
      flights.add(new Flight(fields));
    }
  }
}

void setup() {
  size(800, 600); // 设置画布大小
  textFont(createFont("Arial", 20));
  loadFlightData();  // 程序启动时加载航班数据
}

void draw() {
  background(0, 102, 204);
  if (page == 1) {
    drawPage1();
  } else if (page == 2) {
    drawPage2();
  } else if (page == 3) {
    drawPage3();
  }
}

// Page 1：搜索界面，上半部分为搜索条件，下半部分为航班信息输出面板
void drawPage1() {
  fill(255);
  textSize(36);
  textAlign(CENTER);
  text("Flight Research", width / 2, 50);
  
  // 搜索条件面板
  drawPanel(50, 80, 700, 300, "Search Criteria");
  drawSearchCriteria();
  
  // 航班信息输出面板
  drawFlightInfoPanel();
}

// Page 2：详细航班信息页（示例）
void drawPage2() {
  fill(255);
  textSize(32);
  textAlign(CENTER);
  text("Detailed flight informations", width / 2, 50);
  drawPanel(100, 100, 600, 300, "Flight Details");
  drawFlightDetails();
  drawBackButton();
}

// Page 3：相关航班信息页（示例）
void drawPage3() {
  fill(255);
  textSize(32);
  textAlign(CENTER);
  text("Related flight information", width / 2, 50);
  drawBackButton();
}

// 绘制搜索条件部分
void drawSearchCriteria() {
  fill(0);
  textSize(20);
  text("Airport", 80, 140);
  
  // Origin 标签与输入框
  text("Origin:", 80, 165);
  drawInputField(140, 145, 200, 30, originText, focusedField == 1);
  
  // Destination 标签与输入框
  text("Destination:", 80, 190);
  drawInputField(190, 175, 200, 30, destinationText, focusedField == 2);
  
  text("Date Range", 80, 230);
  
  // Fly Date Range 标签与输入框
  text("Fly Date Range:", 80, 255);
  drawInputField(225, 240, 200, 30, flyDateText, focusedField == 3);
  
  // Arrive Date Range 标签与输入框
  text("Arrive Date Range:", 80, 280);
  drawInputField(250, 270, 200, 30, arriveDateText, focusedField == 4);
  
  text("Lateness", 80, 320);
  drawLatenessButtons();
}

// 绘制输入框，获得焦点时边框为红色
void drawInputField(int x, int y, int w, int h, String content, boolean focused) {
  if (focused) {
    stroke(255, 0, 0);
  } else {
    stroke(0);
  }
  fill(255);
  rect(x, y, w, h, 8);
  noStroke();
  fill(0);
  textAlign(LEFT, CENTER);
  text(content, x + 5, y + h/2);
}

// 绘制航班状态切换按钮
void drawLatenessButtons() {
  drawToggleButton(80, 350, "On-time", onTimeSelected);
  drawToggleButton(200, 350, "Delayed", delayedSelected);
  drawToggleButton(320, 350, "Cancelled", cancelledSelected);
}

// 绘制单个切换按钮（包含悬停与选中效果）
void drawToggleButton(int x, int y, String label, boolean selected) {
  if (selected) {
    fill(150);
  } else if (mouseX > x && mouseX < x + 100 && mouseY > y - 20 && mouseY < y + 10) {
    fill(200);
  } else {
    fill(255);
  }
  rect(x, y - 20, 100, 30, 8);
  fill(0);
  textAlign(CENTER, CENTER);
  text(label, x + 50, y - 5);
}

// 绘制带标题的面板
void drawPanel(int x, int y, int w, int h, String title) {
  fill(255, 255, 255, 180);
  rect(x, y, w, h, 15);
  fill(0);
  textSize(22);
  textAlign(LEFT);
  text(title, x + 20, y + 30);
}

// 绘制航班信息输出面板，严格格式：
// "FL_DATE   MKT_CARRIER_FL_NUM    ORIGIN_CITY_NAME to DEST_CITY_NAME"
void drawFlightInfoPanel() {
  // 绘制面板背景
  drawPanel(flightPanelX, flightPanelY, flightPanelW, flightPanelH, "");
  
  // 限定绘制区域为该面板范围
  clip(flightPanelX, flightPanelY, flightPanelW, flightPanelH);
  
  int startIndex = scrollY / flightItemHeight;
  int endIndex = min(flights.size(), startIndex + flightPanelH / flightItemHeight + 1);
  
  // 绘制当前可见的航班信息
  for (int i = startIndex; i < endIndex; i++) {
    Flight f = flights.get(i);
    int yPos = flightPanelY + (i * flightItemHeight - scrollY);
    
    // 严格格式输出：
    // FL_DATE   MKT_CARRIER_FL_NUM    ORIGIN_CITY_NAME to DEST_CITY_NAME
    String flightInfo = f.flDate + "   " + f.mktCarrierFlNum 
                        + "    " + f.originCity + " to " + f.destCity;
    
    // 鼠标悬停时高亮显示
    if (mouseX > flightPanelX && mouseX < flightPanelX + flightPanelW &&
        mouseY > yPos && mouseY < yPos + flightItemHeight) {
      fill(200);
    } else {
      fill(255);
    }
    rect(flightPanelX, yPos, flightPanelW, flightItemHeight);
    
    fill(0);
    textAlign(LEFT, CENTER);
    text(flightInfo, flightPanelX + 5, yPos + flightItemHeight / 2);
  }
  
  noClip();
}

// 绘制 Page 2 中的详细航班信息（示例）
void drawFlightDetails() {
  fill(0);
  textSize(20);
  text("Airline: Example Air", 120, 170);
  text("Flight Number: EX123", 120, 200);
  drawInteractiveButton(120, 230, "Departure: XYZ Airport");
  drawInteractiveButton(120, 260, "Arrival: ABC Airport");
  drawInteractiveButton(120, 290, "Distance: 500 miles");
}

void drawInteractiveButton(int x, int y, String label) {
  fill(255);
  rect(x, y - 20, 250, 30, 8);
  fill(0);
  textAlign(LEFT, CENTER);
  text(label, x + 10, y - 5);
}

void drawBackButton() {
  if (mouseX > 50 && mouseX < 150 && mouseY > 500 && mouseY < 540) {
    fill(200, 130, 0);
  } else {
    fill(255, 165, 0);
  }
  rect(50, 500, 100, 40, 8);
  fill(0);
  textSize(20);
  textAlign(CENTER, CENTER);
  text("Back", 100, 520);
}

void mousePressed() {
  if (page == 1) {
    // 检查输入框点击，设置焦点
    if (mouseX > 180 && mouseX < 380 && mouseY > 150 && mouseY < 180) {
      focusedField = 1;
      return;
    }
    if (mouseX > 180 && mouseX < 380 && mouseY > 175 && mouseY < 205) {
      focusedField = 2;
      return;
    }
    if (mouseX > 220 && mouseX < 420 && mouseY > 240 && mouseY < 270) {
      focusedField = 3;
      return;
    }
    if (mouseX > 220 && mouseX < 420 && mouseY > 265 && mouseY < 295) {
      focusedField = 4;
      return;
    }
    focusedField = 0;
    
    // 检查航班信息面板点击 —— 点击任一航班信息按钮跳转到 Page 2
    if (mouseX > flightPanelX && mouseX < flightPanelX + flightPanelW &&
        mouseY > flightPanelY && mouseY < flightPanelY + flightPanelH) {
      int clickedIndex = (mouseY - flightPanelY + scrollY) / flightItemHeight;
      if (clickedIndex >= 0 && clickedIndex < flights.size()) {
        page = 2;
        return;
      }
    }
    
    // 检查航班状态切换按钮点击
    if (mouseX > 80 && mouseX < 180 && mouseY > 330 && mouseY < 360) {
      onTimeSelected = !onTimeSelected;
      if (onTimeSelected) { delayedSelected = false; cancelledSelected = false; }
    }
    else if (mouseX > 200 && mouseX < 300 && mouseY > 330 && mouseY < 360) {
      delayedSelected = !delayedSelected;
      if (delayedSelected) { onTimeSelected = false; cancelledSelected = false; }
    }
    else if (mouseX > 320 && mouseX < 420 && mouseY > 330 && mouseY < 360) {
      cancelledSelected = !cancelledSelected;
      if (cancelledSelected) { onTimeSelected = false; delayedSelected = false; }
    }
  }
  
  if (page == 2) {
    // Page 2 中点击任一详情按钮进入 Page 3
    if (mouseX > 120 && mouseX < 370 && mouseY > 210 && mouseY < 240) { page = 3; }
    else if (mouseX > 120 && mouseX < 370 && mouseY > 240 && mouseY < 270) { page = 3; }
    else if (mouseX > 120 && mouseX < 370 && mouseY > 270 && mouseY < 300) { page = 3; }
    else if (mouseX > 50 && mouseX < 150 && mouseY > 500 && mouseY < 540) { page = 1; }
  }
  
  if (page == 3 && mouseX > 50 && mouseX < 150 && mouseY > 500 && mouseY < 540) {
    page = 2;
  }
}

void keyPressed() {
  if (focusedField != 0) {
    if (key == BACKSPACE) {
      if (focusedField == 1 && originText.length() > 0) {
        originText = originText.substring(0, originText.length() - 1);
      } else if (focusedField == 2 && destinationText.length() > 0) {
        destinationText = destinationText.substring(0, destinationText.length() - 1);
      } else if (focusedField == 3 && flyDateText.length() > 0) {
        flyDateText = flyDateText.substring(0, flyDateText.length() - 1);
      } else if (focusedField == 4 && arriveDateText.length() > 0) {
        arriveDateText = arriveDateText.substring(0, arriveDateText.length() - 1);
      }
    }
    else if (key == ENTER || key == RETURN) {
      focusedField = 0;
    }
    else if (key != CODED) {
      if (focusedField == 1) { originText += key; }
      else if (focusedField == 2) { destinationText += key; }
      else if (focusedField == 3) { flyDateText += key; }
      else if (focusedField == 4) { arriveDateText += key; }
    }
  }
}

void mouseWheel(MouseEvent event) {
  float e = event.getCount();
  scrollY += e * 10;  // 调整滚动速度
  scrollY = constrain(scrollY, 0, max(0, flights.size() * flightItemHeight - flightPanelH));
}

